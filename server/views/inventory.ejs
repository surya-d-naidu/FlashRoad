<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Manage Products - FlashRoad</title>
  <link rel="stylesheet" href="/css/inventory.css">
</head>
<body>
  <header>
    <h1>Vendor Dashboard</h1>
    <nav>
      <a href="/">Home</a> | <a href="/logout" onclick="logout()">Logout</a>
    </nav>
  </header>

  <main>
    <h2>Add a New Product</h2>
    <form id="addProductForm" enctype="multipart/form-data">
      <label for="name">Product Name:</label>
      <input type="text" name="name" id="name" required><br><br>

      <label for="description">Description:</label>
      <textarea name="description" id="description" required></textarea><br><br>

      <label for="price">Price:</label>
      <input type="number" name="price" id="price" required><br><br>

      <label for="stock">Stock Quantity:</label>
      <input type="number" name="stock" id="stock" required><br><br>

      <label for="image">Product Image:</label>
      <input type="file" name="image" id="image" accept="image/*" required><br><br>

      <button type="submit">Add Product</button>
      <div id="successMessage" style="display:none; color: green;"></div>
    </form>

    <h3>Your Products</h3>
    <table id="products-table">
      <thead>
        <tr>
          <th>Product Name</th>
          <th>Description</th>
          <th>Price</th>
          <th>Stock</th>
          <th>Update Stock</th>
        </tr>
      </thead>
      <tbody>
        <!-- Products will be dynamically loaded here -->
      </tbody>
    </table>
    <div id="sales-summary">
      <h3>Total Sales: ₹<span id="total-sales">0</span></h3>
      <h3>Sales Per Product</h3>
      <table id="sales-per-product">
        <thead>
          <tr>
            <th>Product Name</th>
            <th>Sales</th>
            <th>Quantity Sold</th>
          </tr>
        </thead>
        <tbody>
          <!-- Sales per product will be dynamically loaded here -->
        </tbody>
      </table>
    </div>
  </main>

  <script>
    async function loadDashboard() {
  const token = localStorage.getItem('authToken');  

  if (!token) {
    alert('You need to log in to view the dashboard.');
    window.location.href = '/login';  
    return;
  }

  try {
    const response = await fetch('/vendor-dashboard-api', {
      method: 'GET',
      headers: {
        'Authorization': `Bearer ${token}`,
        'Content-Type': 'application/json'
      }
    });

    const data = await response.json();
    
    if (response.ok) {
      // Display total sales
      document.getElementById('total-sales').textContent = data.totalSales;

      // Display sales per product
      const salesPerProductTableBody = document.querySelector('#sales-per-product tbody');
      salesPerProductTableBody.innerHTML = '';  // Clear any previous data

      for (const productId in data.salesPerProduct) {
        const productData = data.salesPerProduct[productId];
        const row = document.createElement('tr');
        row.innerHTML = `
          <td>${productData.product.name}</td>
          <td>₹${productData.sales}</td>
          <td>${productData.quantity}</td>
        `;
        salesPerProductTableBody.appendChild(row);
      }
    } else {
      throw new Error(data.message || 'Failed to load dashboard data');
    }
  } catch (error) {
    console.error('Error loading vendor dashboard:', error);
    alert('Error loading vendor dashboard.');
  }
}

loadDashboard();

    async function loadProducts() {
      const token = localStorage.getItem('authToken');  

      if (!token) {
        alert('You need to log in to manage products.');
        window.location.href = '/login';  
        return;
      }

      try {
        const response = await fetch('/api/vendor/manage-products', {
          method: 'GET',
          headers: {
            'Authorization': `Bearer ${token}`,  
            'Content-Type': 'application/json'
          }
        });

        const data = await response.json();
        const productsTableBody = document.querySelector('#products-table tbody');
        productsTableBody.innerHTML = '';  

        if (data.products.length === 0) {
          const row = document.createElement('tr');
          row.innerHTML = '<td colspan="5">No products available.</td>';
          productsTableBody.appendChild(row);
        } else {
          data.products.forEach(product => {
            const row = document.createElement('tr');
            row.innerHTML = `
              <td>${product.name}</td>
              <td>${product.description}</td>
              <td>₹${product.price}</td>
              <td>${product.stock}</td>
              <td><button onclick="updateStock('${product._id}')">Update Stock</button></td>
            `;
            productsTableBody.appendChild(row);
          });
        }
      } catch (error) {
        console.error('Error loading products:', error);
        alert('Error loading products.');
      }
    }

    
    document.getElementById('addProductForm').addEventListener('submit', async function(event) {
  event.preventDefault();

  const formData = new FormData();
  formData.append('name', document.getElementById('name').value);
  formData.append('description', document.getElementById('description').value);
  formData.append('price', document.getElementById('price').value);
  formData.append('stock', document.getElementById('stock').value);
  formData.append('image', document.getElementById('image').files[0]);

  const token = localStorage.getItem('authToken');  

  if (!token) {
    alert('You need to log in to add products.');
    window.location.href = '/login';  
    return;
  }

  try {
    const response = await fetch('/api/vendor/manage-products', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${token}`,
      },
      body: formData
    });

    const data = await response.json(); 

    if (response.ok) {
      
      const successMessage = document.getElementById('successMessage');
      successMessage.style.display = 'block';  
      successMessage.textContent = data.message;  

      loadProducts();  
      document.getElementById('addProductForm').reset();  
    } else {
      throw new Error('Failed to add product');
    }
  } catch (error) {
    console.error('Error adding product:', error);
    alert('Error adding product.');
  }
});


    
    async function updateStock(productId) {
      const stock = prompt('Enter new stock quantity:');
      if (stock !== null && !isNaN(stock) && stock >= 0) {
        const token = localStorage.getItem('authToken');  

        if (!token) {
          alert('You need to log in to update stock.');
          window.location.href = '/login';  
          return;
        }

        try {
          const response = await fetch(`/api/vendor/update-stock/${productId}`, {
            method: 'POST',
            headers: {
              'Authorization': `Bearer ${token}`,
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({ stock })
          });

          if (response.ok) {
            loadProducts();  
          } else {
            throw new Error('Failed to update stock');
          }
        } catch (error) {
          console.error('Error updating stock:', error);
          alert('Error updating stock.');
        }
      } else {
        alert('Invalid stock value.');
      }
    }

    loadProducts();
  </script>
</body>
</html>
